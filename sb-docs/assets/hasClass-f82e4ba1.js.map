{"version":3,"file":"hasClass-f82e4ba1.js","sources":["../../node_modules/@restart/hooks/esm/useCallbackRef.js","../../node_modules/@restart/hooks/esm/useMounted.js","../../node_modules/@restart/hooks/esm/useIsomorphicEffect.js","../../node_modules/@restart/hooks/esm/useUpdatedRef.js","../../node_modules/@restart/hooks/esm/useWillUnmount.js","../../node_modules/dom-helpers/esm/contains.js","../../node_modules/@restart/ui/esm/useWindow.js","../../node_modules/@restart/ui/esm/useWaitForDOMRef.js","../../node_modules/@restart/ui/esm/NoopTransition.js","../../node_modules/@restart/ui/esm/ImperativeTransition.js","../../node_modules/@restart/ui/esm/utils.js","../../node_modules/dom-helpers/esm/hasClass.js"],"sourcesContent":["import { useState } from 'react';\n\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\nexport default function useCallbackRef() {\n  return useState(null);\n}","import { useRef, useEffect } from 'react';\n\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\nexport default function useMounted() {\n  const mounted = useRef(true);\n  const isMounted = useRef(() => mounted.current);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","import { useEffect, useLayoutEffect } from 'react';\nconst isReactNative = typeof global !== 'undefined' &&\n// @ts-ignore\nglobal.navigator &&\n// @ts-ignore\nglobal.navigator.product === 'ReactNative';\nconst isDOM = typeof document !== 'undefined';\n\n/**\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\n * Only useful to avoid the console warning.\n *\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\n *\n * @category effects\n */\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;","import { useRef } from 'react';\n\n/**\n * Returns a ref that is immediately updated with the new value\n *\n * @param value The Ref value\n * @category refs\n */\nexport default function useUpdatedRef(value) {\n  const valueRef = useRef(value);\n  valueRef.current = value;\n  return valueRef;\n}","import useUpdatedRef from './useUpdatedRef';\nimport { useEffect } from 'react';\n\n/**\n * Attach a callback that fires when a component unmounts\n *\n * @param fn Handler to run when the component unmounts\n * @category effects\n */\nexport default function useWillUnmount(fn) {\n  const onUnmount = useUpdatedRef(fn);\n  useEffect(() => () => onUnmount.current(), []);\n}","/* eslint-disable no-bitwise, no-cond-assign */\n\n/**\n * Checks if an element contains another given element.\n * \n * @param context the context element\n * @param node the element to check\n */\nexport default function contains(context, node) {\n  // HTML DOM and SVG DOM may have different support levels,\n  // so we need to check on context instead of a document root element.\n  if (context.contains) return context.contains(node);\n  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);\n}","import { createContext, useContext } from 'react';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nconst Context = /*#__PURE__*/createContext(canUseDOM ? window : undefined);\nexport const WindowProvider = Context.Provider;\n\n/**\n * The document \"window\" placed in React context. Helpful for determining\n * SSR context, or when rendering into an iframe.\n *\n * @returns the current window\n */\nexport default function useWindow() {\n  return useContext(Context);\n}","import ownerDocument from 'dom-helpers/ownerDocument';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport { useState, useEffect } from 'react';\nimport useWindow from './useWindow';\nexport const resolveContainerRef = (ref, document) => {\n  if (!canUseDOM) return null;\n  if (ref == null) return (document || ownerDocument()).body;\n  if (typeof ref === 'function') ref = ref();\n  if (ref && 'current' in ref) ref = ref.current;\n  if (ref && ('nodeType' in ref || ref.getBoundingClientRect)) return ref;\n  return null;\n};\nexport default function useWaitForDOMRef(ref, onResolved) {\n  const window = useWindow();\n  const [resolvedRef, setRef] = useState(() => resolveContainerRef(ref, window == null ? void 0 : window.document));\n  if (!resolvedRef) {\n    const earlyRef = resolveContainerRef(ref);\n    if (earlyRef) setRef(earlyRef);\n  }\n  useEffect(() => {\n    if (onResolved && resolvedRef) {\n      onResolved(resolvedRef);\n    }\n  }, [onResolved, resolvedRef]);\n  useEffect(() => {\n    const nextRef = resolveContainerRef(ref);\n    if (nextRef !== resolvedRef) {\n      setRef(nextRef);\n    }\n  }, [ref, resolvedRef]);\n  return resolvedRef;\n}","import useEventCallback from '@restart/hooks/useEventCallback';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport { cloneElement, useEffect, useRef } from 'react';\nfunction NoopTransition({\n  children,\n  in: inProp,\n  onExited,\n  mountOnEnter,\n  unmountOnExit\n}) {\n  const ref = useRef(null);\n  const hasEnteredRef = useRef(inProp);\n  const handleExited = useEventCallback(onExited);\n  useEffect(() => {\n    if (inProp) hasEnteredRef.current = true;else {\n      handleExited(ref.current);\n    }\n  }, [inProp, handleExited]);\n  const combinedRef = useMergedRefs(ref, children.ref);\n  const child = /*#__PURE__*/cloneElement(children, {\n    ref: combinedRef\n  });\n  if (inProp) return child;\n  if (unmountOnExit) {\n    return null;\n  }\n  if (!hasEnteredRef.current && mountOnEnter) {\n    return null;\n  }\n  return child;\n}\nexport default NoopTransition;","import useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';\nimport React, { useRef, cloneElement, useState } from 'react';\nimport NoopTransition from './NoopTransition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useTransition({\n  in: inProp,\n  onTransition\n}) {\n  const ref = useRef(null);\n  const isInitialRef = useRef(true);\n  const handleTransition = useEventCallback(onTransition);\n  useIsomorphicEffect(() => {\n    if (!ref.current) {\n      return undefined;\n    }\n    let stale = false;\n    handleTransition({\n      in: inProp,\n      element: ref.current,\n      initial: isInitialRef.current,\n      isStale: () => stale\n    });\n    return () => {\n      stale = true;\n    };\n  }, [inProp, handleTransition]);\n  useIsomorphicEffect(() => {\n    isInitialRef.current = false;\n    // this is for strict mode\n    return () => {\n      isInitialRef.current = true;\n    };\n  }, []);\n  return ref;\n}\n/**\n * Adapts an imperative transition function to a subset of the RTG `<Transition>` component API.\n *\n * ImperativeTransition does not support mounting options or `appear` at the moment, meaning\n * that it always acts like: `mountOnEnter={true} unmountOnExit={true} appear={true}`\n */\nexport default function ImperativeTransition({\n  children,\n  in: inProp,\n  onExited,\n  onEntered,\n  transition\n}) {\n  const [exited, setExited] = useState(!inProp);\n\n  // TODO: I think this needs to be in an effect\n  if (inProp && exited) {\n    setExited(false);\n  }\n  const ref = useTransition({\n    in: !!inProp,\n    onTransition: options => {\n      const onFinish = () => {\n        if (options.isStale()) return;\n        if (options.in) {\n          onEntered == null ? void 0 : onEntered(options.element, options.initial);\n        } else {\n          setExited(true);\n          onExited == null ? void 0 : onExited(options.element);\n        }\n      };\n      Promise.resolve(transition(options)).then(onFinish, error => {\n        if (!options.in) setExited(true);\n        throw error;\n      });\n    }\n  });\n  const combinedRef = useMergedRefs(ref, children.ref);\n  return exited && !inProp ? null : /*#__PURE__*/cloneElement(children, {\n    ref: combinedRef\n  });\n}\nexport function renderTransition(Component, runTransition, props) {\n  if (Component) {\n    return /*#__PURE__*/_jsx(Component, Object.assign({}, props));\n  }\n  if (runTransition) {\n    return /*#__PURE__*/_jsx(ImperativeTransition, Object.assign({}, props, {\n      transition: runTransition\n    }));\n  }\n  return /*#__PURE__*/_jsx(NoopTransition, Object.assign({}, props));\n}","/* eslint-disable import/prefer-default-export */\nexport function isEscKey(e) {\n  return e.code === 'Escape' || e.keyCode === 27;\n}","/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nexport default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}"],"names":["useCallbackRef","useState","useMounted","mounted","useRef","isMounted","useEffect","isReactNative","isDOM","useIsomorphicEffect","useLayoutEffect","useUpdatedRef","value","valueRef","useWillUnmount","fn","onUnmount","contains","context","node","Context","createContext","canUseDOM","useWindow","useContext","resolveContainerRef","ref","document","ownerDocument","useWaitForDOMRef","onResolved","window","resolvedRef","setRef","earlyRef","nextRef","NoopTransition","children","inProp","onExited","mountOnEnter","unmountOnExit","hasEnteredRef","handleExited","useEventCallback","combinedRef","useMergedRefs","child","cloneElement","useTransition","onTransition","isInitialRef","handleTransition","stale","ImperativeTransition","onEntered","transition","exited","setExited","options","onFinish","error","renderTransition","Component","runTransition","props","_jsx","isEscKey","hasClass","element","className"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}